<!--
 Column Bar chart
-->
<script type="text/javascript">
  $(document).ready(function() {
    catCC = [
      <% @statusesByAssigneds.group_by(&:assigned_to_id).each do |s, t| %>
        <%= (s.nil? ? t(:hr_unassigned_issue_label) : (t[0].assigned_first_name.length > 0 ? t[0].assigned_first_name : t[0].assigned_last_name) ).inspect.html_safe%>,
      <%end%>
    ];
    idsCC = [
      <% @statusesByAssigneds.group_by(&:assigned_to_id).each do |s| %>
        "<%= (s[0].nil? ? 0 : s[0]) %>",
      <%end%>
    ];
    datCC = [
      <% @statusesByAssigneds.group_by(&:assigned_to_id).each do |s, t| %>
        {y: <%= t.map{|a| a.totalassignedbystatuses.to_i}.sum.inspect.html_safe%>, user_id: <%= (s.nil? ? 0 : s) %>},
      <%end%>
    ];
    da0CC = [
      <% @project.users.each do |s| %>
        {name: "<%= s.firstname %>", user_id: <%= s.id %>},
      <%end%>
    ];
    chartCCA = new Highcharts.Chart({
      chart: {
        renderTo: 'containerColumnBar',
        type: 'column',
        margin: [ 50, 50, 100, 80]
      },
      credits: {
        enabled: false
      },
      scrollbar:{
        enabled: true
      },
      title: {
        text: '<%=t :hr_columnbar_title_label%>'
      },
      xAxis: {
        categories: [],
        scrollbar: {
          enabled: true
        },
        labels: {
          rotation: -45,
          align: 'right',
          style: {
            font: 'normal 13px Verdana, sans-serif'
          }
        }
      },
      plotOptions: {
        series: {
          cursor: 'pointer',
          events: {
            click: function(event) {
              window.open('../../projects/<%=@project.identifier%>/issues?set_filter=1&f%5B%5D=status_id&op%5Bstatus_id%5D=*&f%5B%5D=assigned_to_id&op%5Bassigned_to_id%5D=' + (event.point.user_id > 0 ? '%3D&v%5Bassigned_to_id%5D%5B%5D=' + event.point.user_id : '%21*') + '&f%5B%5D=&c%5B%5D=status&c%5B%5D=priority&c%5B%5D=subject&c%5B%5D=author&c%5B%5D=assigned_to&c%5B%5D=start_date&c%5B%5D=due_date&c%5B%5D=spent_hours&c%5B%5D=done_ratio&group_by=');
            }
          }
        }
      },
      yAxis: {
        min: 0,
        title: {
          text: '<%=t :hr_columnbar_yaxis_label%>'
        }
      },
      legend: {
        enabled: false
      },
      tooltip: {
        formatter: function() {
          return '<b>'+ this.x +'</b><br/>'+
            '<%=t :tasks_label%>: '+ Highcharts.numberFormat(this.y, 0) ;
        }
      },
      series: [{
        data: [],
        dataLabels: {
          enabled: true,
          rotation: -90,
          color: '#FFFFFF',
          align: 'right',
          x: -3,
          y: 10,
          formatter: function() {
            return this.y;
          },
          style: {
            font: 'normal 13px Verdana, sans-serif'
          }
        }
      }]
    });
  });
</script>
<!--
 Stacked Bar chart
-->
<script type="text/javascript">
  $(document).ready(function() {
    serCC = [
      <% @statusesByAssigneds.group_by(&:id).sort.each do |s, t| %>
        {
          issue_status_id: <%= s %>,
          data: [
            <% t.each do |a| %>
              {y: <%= a.totalassignedbystatuses.to_i %>},
            <%end%>
          ]
        },
      <%end%>
    ];
    chartCCB = new Highcharts.Chart({
      chart: {
        renderTo: 'containerStackedBar',
        type: 'bar'
      },
      credits: {
        enabled: true
      },
      scrollbar:{
        enabled: true
      },
      title: {
        text: '<%=t :hr_stackedcolumnbar_title_label%>'
      },
      xAxis: {
        categories: catCC
      },
      yAxis: {
        reversedStacks: false,
        min: 0,
        title: {
          text: '<%=t :hr_stackedcolumnbar_yaxis_label%>'
        }
      },
      legend: {
        reversed: false,
        y: -50
      },
      tooltip: {
        formatter: function() {
          return ''+
            this.series.name +': '+ this.y +'';
        }
      },
      plotOptions: {
        series: {
          cursor: 'pointer',
          events: {
            click: function(event) {
              window.open('../../projects/<%=@project.identifier%>/issues?set_filter=1&f%5B%5D=status_id&op%5Bstatus_id%5D=%3D&v%5Bstatus_id%5D%5B%5D=' + event.point.issue_status_id + '&f%5B%5D=assigned_to_id&op%5Bassigned_to_id%5D=' + (event.point.user_id > 0 ? '%3D&v%5Bassigned_to_id%5D%5B%5D=' + event.point.user_id : '%21*') + '&f%5B%5D=&c%5B%5D=status&c%5B%5D=priority&c%5B%5D=subject&c%5B%5D=author&c%5B%5D=assigned_to&c%5B%5D=start_date&c%5B%5D=due_date&c%5B%5D=spent_hours&c%5B%5D=done_ratio&group_by=');
            }
          },
          stacking: 'normal'
        }
      },
      series: [
        <% @statusesByAssigneds.group_by(&:id).sort.each do |s, t| %>
          {
            name: '<%= IssueStatus.find(s).name%>',
            data: []
          },
        <%end%>
      ]
    });
    refresh_chartCC("All roles"); 
  });
</script>
<!--
 Refresh table
-->
<script>
  function refresh_chartCC(user_ids) {
    if (user_ids == "All roles") {
      var ids = idsCC.join()
    } else {
      var ids = user_ids
    };
    var catTemp = [];
    var datTemp = [];
    var serTemp = [];
    var i = serCC.length;
    while (i--) {
      serTemp.push({data: []})
    };
    ids.replace(/[\[\]\s]+/g, '').split(",").forEach(
      function(id) {
        if (idsCC.indexOf(id) >= 0) {
          if (id != "0") {
            catTemp.push(catCC[idsCC.indexOf(id)]);
            datTemp.push({user_id: datCC[idsCC.indexOf(id)].user_id, y: datCC[idsCC.indexOf(id)].y});
            for (var i = 0, len = serCC.length; i < len; i++) {
              serTemp[i].data.push({issue_status_id: serCC[i].issue_status_id, user_id: parseInt(id), y: serCC[i].data[idsCC.indexOf(id)].y});
            }
          }
        } else {
          catTemp.push($.grep(da0CC, function(e){ return e.user_id == id; })[0].name);
          datTemp.push({user_id: parseInt(id), y: 0});
          for (var i = 0, len = serCC.length; i < len; i++) {
            serTemp[i].data.push({issue_status_id: serCC[i].issue_status_id, user_id: parseInt(id), y: 0});
          }
        }
      }
    );
    if (idsCC.indexOf("0") >= 0) {
      catTemp.push(catCC[idsCC.indexOf("0")]);
      datTemp.push({user_id: 0, y: datCC[idsCC.indexOf("0")].y});
      for (var i = 0, len = serCC.length; i < len; i++) {
        serTemp[i].data.push({issue_status_id: serCC[i].issue_status_id, user_id: 0, y: serCC[i].data[idsCC.indexOf("0")].y});
      }
    };
    chartCCA.xAxis[0].setCategories(catTemp);
    chartCCA.series[0].setData(datTemp);
    chartCCB.xAxis[0].setCategories(catTemp);
    for (var i = 0, len = serCC.length; i < len; i++) {
      chartCCB.series[i].setData(serTemp[i].data);
    };
  }
</script>
